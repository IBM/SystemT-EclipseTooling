/*******************************************************************************
* Copyright IBM
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/
package com.ibm.biginsights.textanalytics.patterndiscovery.views;

import java.awt.BorderLayout;
import java.awt.Frame;

import org.eclipse.jface.action.Action;
import org.eclipse.swt.SWT;
import org.eclipse.swt.awt.SWT_AWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.ViewPart;

import com.ibm.biginsights.textanalytics.patterndiscovery.Activator;
import com.ibm.biginsights.textanalytics.patterndiscovery.errors.ErrorMessages;
import com.ibm.biginsights.textanalytics.patterndiscovery.export.ExportAll;
import com.ibm.biginsights.textanalytics.patterndiscovery.export.ExportCurrent;
import com.ibm.biginsights.textanalytics.patterndiscovery.export.ExportToCSV;
import com.ibm.biginsights.textanalytics.patterndiscovery.filters.FilterBySizeAction;
import com.ibm.biginsights.textanalytics.patterndiscovery.filters.SetMinSequenceLength;
import com.ibm.biginsights.textanalytics.patterndiscovery.messages.Messages;
import com.ibm.biginsights.textanalytics.patterndiscovery.models.PatternDiscoveryApplet;
import com.ibm.biginsights.textanalytics.patterndiscovery.models.PatternDiscoveryJob;

/**
 * this is the main pd view that display the bubble results once pd is run
 * 
 * 
 */
public class PatternDiscoveryView extends ViewPart
{



  Frame frame;
  Action addItemAction, deleteItemAction, selectAllAction;
  Composite parent;
  PatternDiscoveryApplet applet;
  public static PatternDiscoveryJob job;
  public static int minSize, maxSize;
  private Composite composite;
  FilterBySizeAction filterBySize;
  boolean state;

  public static final String VIEW_ID = "com.ibm.biginsights.textanalytics.patterndiscoveryview";
  public static final String TABLEVIEW_ID = "com.ibm.biginsights.textanalytics.patterndiscoverytableview";

  @Override
  public void createPartControl (Composite parent)
  {
    this.parent = parent;
    composite = new Composite (parent, SWT.EMBEDDED | SWT.NO_BACKGROUND);
    frame = SWT_AWT.new_Frame (composite);
    frame.setLayout (new BorderLayout ());
    createElements ();
    PlatformUI.getWorkbench().getHelpSystem().setHelp(parent, "com.ibm.biginsights.textanalytics.tooling.help.pattern_discovery_view");//$NON-NLS-1$
  }

  /**
   * creates the elements for this view. the main elements in this view are the Applet that display the pattern groups
   * and a label element that display information about the number of groups generated by pd and the number of those
   * currently been displayed
   */
  protected void createElements ()
  {
    if (job != null) {
      loadMinMax ();
      try {
        applet = new PatternDiscoveryApplet (job, minSize, maxSize);
        frame.add (applet, BorderLayout.CENTER);
      }
      catch (Exception e) {
        ErrorMessages.LogErrorMessage (ErrorMessages.PATTERN_DISCOVERY_ERROR_LOADING_PREFUSE_APPLET, e);
      }

      filterBySize = new FilterBySizeAction (job, parent);
      filterBySize.setCurrentValues (minSize, maxSize);

      getViewSite ().getActionBars ().getToolBarManager ().add (new OpenPDTableViewAction ());
      getViewSite ().getActionBars ().getToolBarManager ().add (filterBySize);
      getViewSite ().getActionBars ().getToolBarManager ().add (new SetMinSequenceLength (job, parent));
      getViewSite ().getActionBars ().getToolBarManager ().add (new ExportAll (job));
      getViewSite ().getActionBars ().getToolBarManager ().add (new ExportCurrent (job));
      state = true;
    }
    else {
      state = false;
    }
  }

  /**
   * 
   * @param ajob
   */
  public static void setPatternDiscoveryJob (PatternDiscoveryJob ajob)
  {
    job = ajob;
    FilterBySizeAction.setJob (ajob);
    SetMinSequenceLength.setJob (ajob);
    ExportToCSV.setPDJob (ajob);
  }

  /**
   * 
   */
  public static void loadMinMax ()
  {
    try {
      minSize = job.getMin ();
      maxSize = job.getMax ();
    }
    catch (Exception e) {
      minSize = 1;
      maxSize = 100;
    }
  }

  public static void openCommonSignatureTableView (final String contentSelected)
  {
    org.eclipse.swt.widgets.Display.getDefault ().asyncExec (new Runnable () {
      @Override
      public void run ()
      {
        try {

          IWorkbenchPage wbPage = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ();

          CommonSignatureTableView prevView = (CommonSignatureTableView) wbPage.findView (CommonSignatureTableView.VIEW_ID);

          if (prevView != null) {
            prevView.update (contentSelected, job);
          }
          else {
            CommonSignatureTableView.setVars (contentSelected, job);
          }
          wbPage.showView (CommonSignatureTableView.VIEW_ID);

        }
        catch (PartInitException e) {
          ErrorMessages.LogErrorMessage (ErrorMessages.PATTERN_DISCOVERY_ERROR_OPENING_COMMON_SIGNATURE_VIEW, e);
        }

      }
    });
  }

  /**
   * updates the view
   * @param resetMinMax
   */
  public void updateView (boolean resetMinMax)
  {
    if (!state) {
      createElements ();
    }
    else if (job != null) {
      try {
        loadMinMax ();
        if (applet != null) frame.remove (applet);
        applet = new PatternDiscoveryApplet (job, minSize, maxSize);
        applet.setBounds (frame.getBounds ());
        frame.add (applet, BorderLayout.CENTER);
        if (filterBySize != null) filterBySize.reloadRange ();
        frame.setVisible (true);
        composite.redraw ();
      }
      catch (Exception e) {
        ErrorMessages.LogError ("", e);
      }
    }
  }

  @Override
  public void dispose ()
  {
    state = false;
    if (PatternDiscoveryJob.job != null) {
      PatternDiscoveryJob.job.cancel ();
    }
    super.dispose ();
  }

  /**
   * Passing the focus request to the viewer's control.
   */
  @Override
  public void setFocus ()
  {

  }

  class OpenPDTableViewAction extends Action
  {
    public OpenPDTableViewAction ()
    {
      setImageDescriptor (Activator.getImageDescriptor ("patternDiscoveryTable.gif"));
      setText (Messages.TV_TITLE);
      setToolTipText (Messages.TV_TOOLTIP);
    }

    /* (non-Javadoc)
     * @see org.eclipse.jface.action.Action#run()
     */
    @Override
    public void run ()
    {
      try {
        PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ().showView (TABLEVIEW_ID);
      }
      catch (Exception e) {
      }
    }

  }
}
