/*******************************************************************************
* Copyright IBM
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/
package com.ibm.biginsights.textanalytics.patterndiscovery.views;

import java.util.ArrayList;

import org.eclipse.jface.action.Action;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.KeyListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.ViewPart;

import com.ibm.biginsights.textanalytics.patterndiscovery.Activator;
import com.ibm.biginsights.textanalytics.patterndiscovery.controlers.SeePatternHistoryListener;
import com.ibm.biginsights.textanalytics.patterndiscovery.export.ExportAll;
import com.ibm.biginsights.textanalytics.patterndiscovery.export.ExportCurrent;
import com.ibm.biginsights.textanalytics.patterndiscovery.filters.FilterBySizeAction;
import com.ibm.biginsights.textanalytics.patterndiscovery.filters.SetMinSequenceLength;
import com.ibm.biginsights.textanalytics.patterndiscovery.helpers.AQLUtils;
import com.ibm.biginsights.textanalytics.patterndiscovery.messages.Messages;
import com.ibm.biginsights.textanalytics.patterndiscovery.models.BubbleModel;
import com.ibm.biginsights.textanalytics.patterndiscovery.models.PatternDiscoveryJob;

/**
 * this is the pd table view that display the bubble results in a table
 * 
 */
public class PatternDiscoveryTableView extends ViewPart
{


 
	Action addItemAction, deleteItemAction, selectAllAction;
  Composite parent;
  boolean state;
  private ArrayList<BubbleModel> bubbleModelList;
  private int noOfNodes;
  private int totalAvailable;
  private Table pdResultTable = null;

  private Composite mainComp = null;
  private Label     label    = null;

  private TableItem selectedObject;

  @Override
  public void createPartControl (Composite parent)
  {
    this.parent = parent;
    createElements ();
    PlatformUI.getWorkbench().getHelpSystem().setHelp(parent, "com.ibm.biginsights.textanalytics.tooling.help.pattern_discovery_table_view"); // $NON-NLS-1$
  }

  /**
   * creates the elements for this view. the main elements in this view are the Applet that display the pattern groups
   * and a label element that display information about the number of groups generated by pd and the number of those
   * currently been displayed
   */
  protected void createElements ()
  {
    PatternDiscoveryJob job = PatternDiscoveryView.job;

    if (job != null) {
      createPDTable (job);

      FilterBySizeAction filterBySize = new FilterBySizeAction (job, mainComp);
      filterBySize.setCurrentValues (PatternDiscoveryView.minSize, PatternDiscoveryView.maxSize);

      getViewSite ().getActionBars ().getToolBarManager ().add (new OpenPDViewAction ());
      getViewSite ().getActionBars ().getToolBarManager ().add (filterBySize);
      getViewSite ().getActionBars ().getToolBarManager ().add (new SetMinSequenceLength (job, mainComp));
      getViewSite ().getActionBars ().getToolBarManager ().add (new ExportAll (job));
      getViewSite ().getActionBars ().getToolBarManager ().add (new ExportCurrent (job));
      state = true;
    }
    else {
      state = false;
    }
  }

  public void createPDTable (PatternDiscoveryJob job)
  {
    PatternDiscoveryView.loadMinMax ();

    bubbleModelList = new ArrayList<BubbleModel> ();
    noOfNodes = AQLUtils.getNodesFromDB (job, bubbleModelList, PatternDiscoveryView.minSize, PatternDiscoveryView.maxSize);
    totalAvailable = job.getAvailableBubbles ();

    if (mainComp == null) {
      mainComp = new Composite (parent, SWT.NONE);
      mainComp.setLayout (new GridLayout (1, true));
      mainComp.setBackground (parent.getDisplay ().getSystemColor (SWT.COLOR_WHITE));

      label = new Label (mainComp, SWT.NONE);
      GridData gd = new GridData (GridData.FILL, SWT.TOP, true, false);
      label.setLayoutData (gd);
    }

    if (pdResultTable == null) {
      pdResultTable = new Table (mainComp, SWT.BORDER | SWT.SINGLE | SWT.FULL_SELECTION);
      pdResultTable.setLayoutData (new GridData (GridData.FILL, GridData.FILL, true, true));
      pdResultTable.setHeaderVisible (true);
      pdResultTable.setLinesVisible (true);

      TableColumn[] columns = new TableColumn[4];
      columns[0] = new TableColumn (pdResultTable, SWT.CENTER);
      columns[0].setText (Messages.TV_COL_HEADER_ID);
      columns[0].setWidth (50);

      columns[1] = new TableColumn (pdResultTable, SWT.CENTER);
      columns[1].setText (Messages.TV_COL_HEADER_SIZE);
      columns[1].setWidth (50);

      columns[2] = new TableColumn (pdResultTable, SWT.CENTER);
      columns[2].setText (Messages.TV_COL_HEADER_SIG);
      columns[2].setWidth (200);

      columns[3] = new TableColumn (pdResultTable, SWT.CENTER);
      columns[3].setText (Messages.TV_COL_HEADER_ORISIG);
      columns[3].setWidth (200);

      addTableListeners();
    }
    else {
      pdResultTable.removeAll ();
    }

    if (noOfNodes == 0) {
      label.setText (Messages.PD_NO_PATTERNS);
      pdResultTable.setVisible (false);
    }
    else {
      label.setText (String.format (Messages.PD_VIEW_STATISTIC, totalAvailable, noOfNodes));
      pdResultTable.setVisible (true);
      mainComp.redraw ();

      for (BubbleModel bubble : bubbleModelList) {
        TableItem ti = new TableItem (pdResultTable, SWT.NONE);
        ti.setText (0, String.valueOf (bubble.id));
        ti.setText (1, String.valueOf (bubble.size));
        ti.setText (2, bubble.signature);
        ti.setText (3, bubble.originalSignature);
      }
    }

    mainComp.pack ();
  }

  private void addTableListeners ()
  {
    if (pdResultTable == null)
      return;

    Menu menu = new Menu(pdResultTable);
    pdResultTable.setMenu (menu);
    MenuItem seeHistoryItem = new MenuItem(menu, SWT.NONE);
    seeHistoryItem.setText ("* See History");
    seeHistoryItem.addSelectionListener (new SelectionAdapter () {
      public void widgetSelected (final SelectionEvent e)
      {
        String origSig = selectedObject.getText (3);
        SeePatternHistoryListener seeHist = new SeePatternHistoryListener(origSig, PatternDiscoveryView.job);
        seeHist.run ();
      }
    });

    pdResultTable.addSelectionListener (new SelectionListener() {
      
      @Override
      public void widgetSelected (SelectionEvent e)
      {
        Object o = e.getSource ();
        if (o instanceof Table) {
          if ( ((Table)o).getSelectionCount () > 0 )
            selectedObject = (TableItem)((Table)o).getSelection ()[0];
          else
            selectedObject = null;
        }
      }
      
      @Override
      public void widgetDefaultSelected (SelectionEvent e)
      {
      }
    });

    pdResultTable.addMouseListener (new MouseListener() {
      
      @Override
      public void mouseUp (MouseEvent e)
      {
      }
      
      @Override
      public void mouseDown (MouseEvent e)
      {
      }
      
      @Override
      public void mouseDoubleClick (MouseEvent e)
      {
        openSignatureTableView ();
      }
    });

    pdResultTable.addKeyListener (new KeyListener() {
      
      @Override
      public void keyReleased (KeyEvent e)
      {
        if ( e.keyCode == SWT.CR &&
             selectedObject != null ) {
          openSignatureTableView ();
        }
      }
      
      @Override
      public void keyPressed (KeyEvent e)
      {
      }
    });
  }

  private void openSignatureTableView ()
  {
    if (selectedObject != null) {
      String origSig = selectedObject.getText (3);
      PatternDiscoveryView.openCommonSignatureTableView (origSig);
    }
  }

  @Override
  public void dispose ()
  {
    state = false;
    if (PatternDiscoveryJob.job != null) {
      PatternDiscoveryJob.job.cancel ();
    }
    super.dispose ();
  }

  /**
   * Passing the focus request to the viewer's control.
   */
  @Override
  public void setFocus ()
  {

  }

  class OpenPDViewAction extends Action
  {
    public OpenPDViewAction ()
    {
      setImageDescriptor (Activator.getImageDescriptor ("patternDiscovery.gif"));
      setText (Messages.PD_VIEW_TITLE);
      setToolTipText (Messages.PD_VIEW_TOOLTIP);
    }

    /* (non-Javadoc)
     * @see org.eclipse.jface.action.Action#run()
     */
    @Override
    public void run ()
    {
      try {
        PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ().showView (PatternDiscoveryView.VIEW_ID);
      }
      catch (Exception e) {
      }
    }
  }
}
